<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xmlns="http://java.sun.com/xml/ns/javaee"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
		 id="WebApp_ID" version="3.0">
	
	<context-param> 
		<param-name>webAppRootKey</param-name> 
		<param-value>chargeServer.root</param-value>   <!-- 应用Root，运行时可动态获取运行目录 -->
	</context-param>
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:/config/applicationConfig.xml	<!-- 加载主配置文件 -->
		</param-value>
	</context-param>

	<servlet>
		<servlet-name>dispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:/config/springmvcConfig.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 以下3项参数与log4j的配置相关 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:/properties/log4j.properties</param-value>
    </context-param>
    
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param>
    <listener>
        <listener-class>
            org.springframework.web.util.Log4jConfigListener
        </listener-class>
    </listener>
	<!-- end -->

	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<!-- 主要用于解决java.beans.Introspector导致的内存泄漏的问题 -->
	<listener>
		<listener-class>
			org.springframework.web.util.IntrospectorCleanupListener
		</listener-class>
	</listener>
	
	<!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
	<!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->
	<!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
	<!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--&lt;!&ndash; 资源文件缓存时间 &ndash;&gt;-->
	<!--<filter>-->
		<!--<filter-name>ExpiresFilter</filter-name>-->
		<!--<filter-class>org.apache.catalina.filters.ExpiresFilter</filter-class>-->
		<!--<init-param>-->
			<!--<param-name>ExpiresByType image</param-name>-->
			<!--<param-value>access plus 10 minutes</param-value>-->
		<!--</init-param>-->
		<!--<init-param>-->
			<!--<param-name>ExpiresByType text/css</param-name>-->
			<!--<param-value>access plus 10 minutes</param-value>-->
		<!--</init-param>-->
		<!--<init-param>-->
			<!--<param-name>ExpiresByType application/javascript</param-name>-->
			<!--<param-value>access plus 10 minutes</param-value>-->
		<!--</init-param>-->
	<!--</filter>-->

	<!--<filter-mapping>-->
		<!--<filter-name>ExpiresFilter</filter-name>-->
		<!--<url-pattern>/*</url-pattern>-->
		<!--<dispatcher>REQUEST</dispatcher>-->
	<!--</filter-mapping>-->
	<!---->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>opLoginFilter</filter-name>
		<filter-class>com.xinpengdu.web.op.access.filter.OpLoginFilter</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>opLoginFilter</filter-name>
		<url-pattern>/op/monitor/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>opLoginFilter</filter-name>
		<url-pattern>/op/analyze/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>opLoginFilter</filter-name>
		<url-pattern>/op/config/*</url-pattern>
	</filter-mapping>
	<!-- <filter-mapping>
		<filter-name>opLoginFilter</filter-name>
		<url-pattern>/op/maintain/*</url-pattern>
	</filter-mapping> -->
	<filter-mapping>
		<filter-name>opLoginFilter</filter-name>
		<url-pattern>/op/system/*</url-pattern>
	</filter-mapping>

	<display-name>ChargeServer</display-name>
</web-app>